<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>poiComClient</title>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script> 
    <script src="http://112.124.14.229:8091/Scripts/jquery.signalR-1.1.1.min.js"></script>
    <script src="http://112.124.14.229:8091/signalr/hubs"></script>

	<link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/themes/base/jquery-ui.css">
 
    <script>
        // wait for the DOM to be loaded 
        $(document).ready(function () {
            //initialize user name
            $('#userName').val('huan');

            $.connection.hub.url = "http://112.124.14.229:8091/signalr/";
            $.connection.hub.qs = {
                'userid': $('#userName').val(),
                'service': "interactive",
                'sessions' : "",
                'isReconnect' : 0
            };

            $.connection.hub.error(function (error) {
                console.log(error);
            });

            poiProxy = $.connection.poiProxy;

            //bind client protocols
            poiProxy.client.logMessage = addTextToMessageView;
            
            poiProxy.client.interactiveSessionCreated = interactiveSessionCreated;
            poiProxy.client.interactiveSessionJoined = interactiveSessionJoined;
            poiProxy.client.interactiveSessionJoinFailed = interactiveSessionJoinFailed;
            poiProxy.client.interactiveSessionNewUserJoined = interactiveSessionNewUserJoined;
            poiProxy.client.interactiveSessionSynced = interactiveSessionSynced;
            poiProxy.client.clientReconnected = clientReconnected;

            poiProxy.client.interactiveSessionEnded = interactiveSessionEnded;
            poiProxy.client.interactiveSessionRatedAndEnded = interactiveSessionRatedAndEnded;


            poiProxy.client.textMsgReceived = textMsgReceived;
            poiProxy.client.imageMsgReceived = imageMsgReceived;
            poiProxy.client.voiceMsgReceived = voiceMsgReceived;
            poiProxy.client.illustrationMsgReceived = illustrationMsgReceived;

            $.connection.hub.reconnected(function(){
                clientReconnected();
            });

            $.connection.hub.disconnected(function(){
                clientDisconnected();
            });

            $.connection.hub.start().done(function () {
                alert("Start done!");
            });

            $('#sendTextButton').click(function(){
                poiProxy.server.textMsgReceived($('#sessionId').val(), $('#textInput').val());
            });

            $('#updateUserNameButton').click(function(){
                setUserId($('#userName').val());
            });

            $('#createSessionButton').click(function(){
                createInteractiveSession("dummy");
            });


            $('#joinSessionButton').click(function(){
                joinInteractiveSession($('#sessionId').val());
            });

            $('#endSessionButton').click(function(){
                endInteractiveSession($('#sessionId').val());
            });

            $('#rateSessionButton').click(function(){
                rateAndEndInteractiveSession($('#sessionId').val(), 3);
                leaveInteractiveSession($('#sessionId').val());
            });

            $('#syncSessionButton').click(function(){
                syncInteractiveSession($('#sessionId').val(), $('#eventIndex').val());
            });

            $('#stopConnection').click(function(){
                $.connection.hub.stop();
            });
        });

        function addTextToMessageView(text)
        {
            var curLog = $('#textMessage').val();
            $('#textMessage').val(text + "\\\n" + curLog);
        }

        //Connection state change callbacks
        function clientReconnected()
        {
            addTextToMessageView("Client reconnected");
        }

        function clientDisconnected()
        {
            console.log("Client disconnected!");
        }

        //Set user id for the underlying communication
        function setUserId(userId)
        {
            poiProxy.state.userId = userId;
        }

        //Message received functions, to be called by the proxy server
        function textMsgReceived(senderId, sessionId, message)
        {
            addTextToMessageView(senderId + ", " + sessionId + ": " + message);
        }

        function imageMsgReceived(senderId, sessionId, mediaId)
        {
            addTextToMessageView(senderId + ", " + sessionId + ": image " + mediaId);
        }

        function voiceMsgReceived(senderId, sessionId, mediaId)
        {
            addTextToMessageView(senderId + ", " + sessionId + ": voice " + mediaId);
        }

        function illustrationMsgReceived(senderId, sessionId, mediaId)
        {
            addTextToMessageView(senderId + ", " + sessionId + ": illustration " + mediaId);
        }


        //Message sending functions, to be called by the user interface
        function sendTextMsg(sessionId, message)
        {
            poiProxy.server.textMsgReceived(sessionId, message);
        }

        function sendImageMsg(sessionId, mediaId)
        {
            poiProxy.server.imageMsgReceived(sessionId, mediaId);
        }

        function sendVoiceMsg(sessionId, mediaId)
        {
            poiProxy.server.voiceMsgReceived(sessionId, mediaId);
        }

        function sendIllustrationMsg(sessionId, mediaId)
        {
            poiProxy.server.illustrationMsgReceived(sessionId, mediaId);
        }

        //Session create and join functions, to be called by the user interface
        function createInteractiveSession(mediaId)
        {
            poiProxy.server.createInteractiveSession(mediaId);
        }

        function joinInteractiveSession(sessionId)
        {
            poiProxy.server.joinInteractiveSession(sessionId);
        }

        //Session created and joined functions, to be called by the proxy server
        function interactiveSessionCreated(presId, sessionId)
        {
            addTextToMessageView("Interactive session created with id " + sessionId);
            $('#sessionId').val(sessionId); 
        }

        function interactiveSessionJoined(sessionId, archive)
        {
            console.log(archive);
            addTextToMessageView("Interactive session joined with id " + sessionId);
        }

        function interactiveSessionJoinFailed(sessionId)
        {
            addTextToMessageView("Interactive session cannot be joined with id " + sessionId);
        }

        function interactiveSessionNewUserJoined(userId, sessionId)
        {
            addTextToMessageView(userId + " has joined Interactive session " + sessionId);
        }

        function interactiveSessionEnded(sessionId)
        {
            //Add your code to handle session ended by tutor
            addTextToMessageView("Session ended: " + sessionId);
        }

        function interactiveSessionRatedAndEnded(sessionId, rating)
        {
            //Add your code to handle rating by student
            addTextToMessageView("Session rated and ended: " + sessionId + " with rating: " + rating);

            //Leave the session
            leaveInteractiveSession(sessionId);
        }

        function rateAndEndInteractiveSession(sessionId, rating)
        {
            poiProxy.server.rateAndEndInteractiveSession(sessionId, rating);
        }

        function endInteractiveSession(sessionId)
        {
            poiProxy.server.endInteractiveSession(sessionId);
        }

        function leaveInteractiveSession(sessionId)
        {
            poiProxy.server.leaveInteractiveSession(sessionId);
        }

        function syncInteractiveSession(sessionId, eventIndex)
        {
            poiProxy.server.syncClientMessageWithSession(sessionId, eventIndex);
        }

        //Session synced callback
        function interactiveSessionSynced(sessionId, missedEvent)
        {
            addTextToMessageView("Session " + sessionId + " synced");
            console.log(missedEvent);
        }

        //Rebuild signalr connection with session states
        function rebuildConnection(userId, sessionList)
        {
            $.connection.hub.qs = {
                'userid': userId,
                'service': "interactive",
                'sessions' : sessionList
            };

            $.connection.hub.start();
        }

    </script> 
</head>
<body>
    <div>
        @RenderBody()
    </div>
</body>
</html>
